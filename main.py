from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup,InputMediaPhoto,BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext,
    ChatMemberHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ChatMemberHandler
)


import requests
import os
from dotenv import load_dotenv

# Safe key map for region and city names
REGION_MAP = {
    "addisababa": "·ä†·ã≤·àµ ·ä†·â†·â£",
    "afar": "·ä†·çã·à≠",
    "amhara": "·ä†·àõ·à´",
    "benishangulgumuz": "·â§·äí·àª·äï·åâ·àç‚Äë·åâ·àô·ãù",
    "dire_dawa": "·ãµ·à¨ ·ã≥·ãã",
    "gambela": "·åã·àù·â§·àã",
    "harari": "·àê·à®·à™",
    "oromia": "·ä¶·àÆ·àö·ã´",
    "sidama": "·à≤·ã≥·àõ",
    "somali": "·à∂·àõ·àä",
    "southwest": "·ã∞·â°·â• ·àù·ãï·à´·â•",
    "tigray": "·âµ·åç·à´·ã≠"
}

# Include only cities ‚â•70k, plus capitals of smaller regions
CITY_MAP = {
    # Addis Ababa (national capital, 4 million+)
    "addis_ketema": "·ä†·ã≤·àµ ·ä®·â∞·àõ", 
    "akaki_kaliti": "·ä†·âÉ·âÇ ·âÉ·àä·â≤", 
    "arada": "·ä†·à´·ã≥", 
    "bole": "·â¶·àå", 
    "gullele":  "·åâ·àà·àå", 
    "kirkos": "·âÇ·à≠·âÜ·àµ", 
    "kolfe_keranio":  "·äÆ·àç·çå ·âÄ·à´·äí·ãÆ", 
    "lideta": "·àç·ã∞·â≥", 
    "nifas_silk_lafto": "·äï·çã·àµ ·àµ·àç·ä≠‚Äë·àã·çç·â∂", 
    "yeka": "·ã®·ä´", 

    # Afar ‚Äì Semera (capital, ~833‚Äì3‚ÄØk)
    "semera": "·à∞·àò·à´",
    # Amhara ‚Äì none above 70k? but BahirDar, Gondar, Dessie are >70k
    "bahirdar": "·â£·àÖ·à≠ ·ã≥·à≠",
    "gondar": "·åé·äï·ã∞·à≠",
    "dessie": "·ã∞·à¥",
    # Benishangul‚ÄëGumuz ‚Äì Assosa (capital, ~20k) included despite below threshold
    "asosa": "·ä†·à∂·à≥",
    # Dire Dawa ‚Äì city
    "dire_dawa": "·ãµ·à¨ ·ã≥·ãã",
    # Gambela ‚Äì Gambela town (capital), include
    "gambela": "·åã·àù·â§·àã",
    # Harari ‚Äì Harar (capital)
    "harar": "·àê·à®·à≠",
    # Oromia ‚Äì major cities
    "adama": "·ä†·ã≥·àõ",
    "jimma": "·åÖ·àõ",
    "hawassa": "·àÉ·ãã·à≥",
    "bishoftu": "·â¢·àæ·çç·â±",
    "shashamane": "·àª·àª·àõ·äî",
    # Sidama ‚Äì Hawassa already included
    # Somali ‚Äì Jijiga
    "jijiga": "·åÖ·åÖ·åã",
    # SouthWest ‚Äì Bonga (capital, ~56k)
    "bonga": "·â¶·äï·åã",
    # Tigray ‚Äì Mekelle, Adigrat, Shire
    "mekelle": "·àò·âÄ·àå",
    "adigrat": "·ä†·ã≤·åç·à´·âµ",
    "shire": "·à∫·à¨"
}

REGIONS = {
    "addisababa": ["addis_ketema","akaki_kaliti", "arada","bole","gullele","kirkos","kolfe_keranio","lideta","nifas_silk_lafto", "yeka" ],
    "afar": ["semera"],
    "amhara": ["bahirdar", "gondar", "dessie"],
    "benishangulgumuz": ["asosa"],
    "dire_dawa": ["dire_dawa"],
    "gambela": ["gambela"],
    "harari": ["harar"],
    "oromia": ["adama", "jimma",  "bishoftu", "shashamane"],
    "sidama": ["hawassa"],
    "somali": ["jijiga"],
    "southwest": ["bonga"],
    "tigray": ["mekelle", "adigrat", "shire"]
}

# State constants for ConversationHandler
TITLE, PRICE, BEDROOMS, REGION, CITY, DESCRIPTION, IMAGES, CONTACT = range(8)
# Add new constant states for rental owner menu
RENTAL_MENU, SHOW_LISTINGS, HANDLE_ACTION = range(100, 103)
UPDATE_FIELD, UPDATE_VALUE = range(200, 202)


load_dotenv()

API_URI=os.getenv("API_URL")

SEARCH_URL = API_URI+ "/listings/search"
LISTINGS_URL = API_URI+ "/listings"

USERS_URL = API_URI+ "/users"


BOT_TOKEN = os.getenv("BOT_TOKEN")
print("API_URI:", API_URI)
# -------------------------------------------------------------------------------------------
# Search Functionality
# -------------------------------------------------------------------------------------------



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = {
        "telegram_id": user.id,
        "full_name": user.full_name,
        "username": user.username
    }

    try:
        response = requests.post(USERS_URL, json=user_data)
        if response.status_code == 201:
            print("‚úÖ User registered successfully.")
        elif response.status_code == 409:
            print("‚ÑπÔ∏è User already exists.")
        else:
            print("‚ö†Ô∏è Registration failed.")
    except Exception as e:
        print(f"‚ùå Error registering user: {e}")

    keyboard = [
        [InlineKeyboardButton("üîç ·ã®·ä™·à´·ã≠ ·â§·âµ ·ã≠·çà·àç·åâ", callback_data="search")],
        [InlineKeyboardButton("üè† ·ä†·ä®·à´·ã≠ / ·ãà·ä™·àç", callback_data="rental_menu")]
    ]
    await update.message.reply_text("·ä•·äï·ä≥·äï ·ã∞·àÖ·äì ·àò·å°!", reply_markup=InlineKeyboardMarkup(keyboard))
   


async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # keyboard = [[InlineKeyboardButton(REGION_MAP[rid], callback_data=f"region:{rid}")] for rid in REGIONS]
    # await query.edit_message_text("·ä≠·àç·àç ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    keyboard = []
    row = []
    for i, rid in enumerate(REGIONS):
        row.append(InlineKeyboardButton(REGION_MAP[rid], callback_data=f"region:{rid}"))
        if (i + 1) % 2 == 0:  # 2 buttons per row
            keyboard.append(row)
            row = []
    if row:  # Add remaining buttons
        keyboard.append(row)

    await query.edit_message_text("·ä≠·àç·àç ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))

async def region_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    region_id = query.data.split(":")[1]
    context.user_data['region_id'] = region_id

    # cities = REGIONS.get(region_id, [])
    # keyboard = [[InlineKeyboardButton(CITY_MAP[cid], callback_data=f"city:{cid}")] for cid in cities]
    # await query.edit_message_text(f"{REGION_MAP[region_id]} ·ä®·â∞·àõ ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    cities = REGIONS.get(region_id, [])
    keyboard = []
    row = []

    for i, cid in enumerate(cities):
        row.append(InlineKeyboardButton(CITY_MAP[cid], callback_data=f"city:{cid}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await query.edit_message_text(f"{REGION_MAP[region_id]} ·ä®·â∞·àõ ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))

async def city_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city_id = query.data.split(":")[1]
    context.user_data['city_id'] = city_id

    keyboard = [[InlineKeyboardButton(f"·â£·àà {i} ·àò·äù·â≥ ·â§·âµ", callback_data=f"bed:{i}")] for i in range(1, 6)]
    await query.edit_message_text(f"{CITY_MAP[city_id]} ·ã®·àò·äù·â≥ ·â§·âµ ·âÅ·å•·à≠ ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))

async def bed_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    bedrooms = query.data.split(":")[1]
    region_id = context.user_data.get('region_id')
    city_id = context.user_data.get('city_id')

    try:
        res = requests.get(SEARCH_URL, params={
            "region": REGION_MAP[region_id],
            "city": CITY_MAP[city_id],
            "bedrooms": bedrooms
        })
       
        listings = res.json()

        if not listings:
            await query.edit_message_text(
                f"‚ö†Ô∏è ·â† {REGION_MAP[region_id]} - {CITY_MAP[city_id]} ·ãç·àµ·å• ·â£·àà {bedrooms} ·àò·äù·â≥ ·â§·âµ ·ä†·àç·â∞·åà·äò·àù·ç¢"
            )
        else:
            for l in listings:
                # Split and clean the image URLs
                image_list = l.get("image_urls", "").split(",")
                image_list = [url.strip() for url in image_list if url.strip()]
             
                # Construct the message
                caption = (
                    f" üè† *{l['title']}*\n"
                    f" üìç{l['region']} - {l['city']} \n"
                    f" ‚òéÔ∏è {l['contact']} \n"
                    f" üõè ·â£·àà {l['bedrooms']} ·àò·äù·â≥ \n"           
                    f" üíµ {l['price']} ·â•·à≠/·ãà·à≠ \n"
                    
                    f" üìù {l.get('description', '')}\n"
                    

                )
                
                # Send photo if available
                if image_list:
                   
                    try:
                       
                        media_group = []
                        media_group.append(InputMediaPhoto(media=image_list[0], caption=caption, parse_mode="Markdown"))

                        for url in image_list[1:]:
                            media_group.append(InputMediaPhoto(media=url))

                        await context.bot.send_media_group(
                            chat_id=update.effective_chat.id,
                            media=media_group
                        )
                    except Exception as e:
                        print("‚ùå Failed to send media group:", e)
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=caption + "\n‚ö†Ô∏è ·àù·àµ·àé·âΩ ·àò·àã·ä≠ ·ä†·àç·â∞·âª·àà·àù·ç¢",
                            parse_mode="Markdown"
                        )


                else:
                    await query.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        text=caption,
                        parse_mode="Markdown"
                    )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è ·â†·ä•·à≠·àµ·ãé ·àò·àµ·çà·à≠·âµ ·àò·à∞·à®·âµ ·ã®·ä™·à´·ã≠ ·â§·âµ ·àõ·åç·äò·âµ ·ä†·àç·âª·àç·äï·àù·ç¢{e}\n")

async def search_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await choose_region(update, context)





# -------------------------------------------------------------------------------------------
# Add new Functionality
# -------------------------------------------------------------------------------------------



async def post_city_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city_key = query.data.split(":")[1]
    context.user_data['city'] = CITY_MAP[city_key]
    await query.message.reply_text("üìù ·àµ·àà ·â§·â± ·ãù·à≠·ãù·à≠ ·àò·åç·àà·å´·äï ·ã´·àµ·åà·â°·ç• (·àù·à≥·àå·ç° ·â£·àà 2 ·àò·äù·â≥ ·ä≠·çç·àç·ç£ ·àù·åç·â• ·àõ·â•·à∞·ã´ ·â§·âµ·ç£ ·àò·â≥·å†·â¢·ã´ ·ä•·äì ·à≥·àé·äï ·ä†·àà·ãç·ç¢ ·ãç·àÉ ·ä•·äì ·ä§·àå·ä≠·âµ·à™·ä≠ ·ã®·â∞·àü·àã·ç¢·å∏·å•·â≥ ·ã´·àà·ãç ·ä†·ä´·â£·â¢ ·ç¢·ãã·äì ·àò·äï·åà·ãµ ·ä†·âÖ·à´·â¢·ã´...)")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    context.user_data['image_urls'] = []
    await update.message.reply_text("üñº ·àù·àµ·àç ·ã´·àµ·åà·â°·ç¢ ·àÅ·àâ·äï·àù ·ä®·àã·ä© ·â†·äã·àã '1' ·ã≠·åª·çâ:")
    return IMAGES

async def get_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'image_urls' not in context.user_data:
        context.user_data['image_urls'] = []

    count = len(context.user_data['image_urls'])
    if update.message.photo:
        if len(context.user_data['image_urls']) >= 4:
            await update.message.reply_text("‚ö†Ô∏è 4 ·àù·àµ·àé·âΩ·äï ·â•·âª ·äê·ãç ·àõ·àµ·åà·â£·âµ ·àö·çà·âÄ·ã∞·ãâ·ç¢")
        else:
            file_id = update.message.photo[-1].file_id
            context.user_data['image_urls'].append(file_id)
            count = len(context.user_data['image_urls'])
            await update.message.reply_text(f"‚úÖ {count}·äõ·ãç ·àù·àµ·àç ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·âÄ·àù·åß·àç·ç£·ä®·å®·à®·à± ·àà·àò·âÄ·å†·àç 1 ·ã≠·çÉ·çã·ç£ ·ä†·àà·â†·àà·ãö·ã´ ·âÄ·å£·ã©·äï ·àù·àµ·àç ·ã´·àµ·åà·â°·ç¢")
        return IMAGES
    elif update.message.text.lower() == "1" or count >= 4:
        if count == 0:
            context.user_data['image_urls'] = "AgACAgEAAxkBAAID22hN8PJ9sqEmVD0y_HN8CJZc-mYCAAJsrzEbpRdwRmFAXJN3jy8IAQADAgADeQADNgQ"
        else:
            context.user_data['image_urls'] = ",".join(context.user_data['image_urls'])
            
        await update.message.reply_text("‚òéÔ∏è ·àµ·àç·ä≠ ·âÅ·å•·à≠·ãé·äï ·ã´·àµ·åà·â°·ç•")
        return CONTACT
    else:
        await update.message.reply_text("üñº ·ã®·â§·âµ·ãé·äï ·àù·àµ·àç ·ã´·àµ·åà·â° ·ãà·ã≠·àù '1' ·ã≠·åª·çâ ·àà·àò·âÄ·å†·àç:")
        return IMAGES

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    user = update.effective_user
    context.user_data['posted_by'] = user.id

    try:
        response = requests.post(LISTINGS_URL, json=context.user_data)
        if response.status_code == 201:
            await update.message.reply_text("‚úÖ ·ã®·ä™·à´·ã≠ ·â§·âµ·ãé ·ãù·à≠·ãù·à≠ ·â†·âµ·ä≠·ä≠·àç ·â∞·àò·ãù·åç·âß·àç·ç¢")
        else:
            print("Payload being sent:", context.user_data)
            print("response.text:", response.text)
            await update.message.reply_text("‚ö†Ô∏è ·ã®·ä™·à´·ã≠ ·â§·âµ·ãé ·ãù·à≠·ãù·à≠·ãé ·àò·àò·ãù·åà·â• ·ä†·àç·â∞·âª·àà·àù·ç¢ ·ä•·â£·ä≠·ãé ·ã∞·åç·àò·ãç ·ã≠·àû·ä≠·à©·ç¢")
            
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è ·ã®·ä™·à´·ã≠ ·â§·âµ·ãé ·ãù·à≠·ãù·à≠·ãé ·àò·àò·ãù·åà·â• ·ä†·àç·â∞·âª·àà·àù·ç¢ ·ä•·â£·ä≠·ãé ·ã∞·åç·àò·ãç ·ã≠·àû·ä≠·à©·ç¢ {e}")

    return ConversationHandler.END

async def post_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üè† ·àà·ä™·à´·ã≠ ·â§·âµ·ãé ·ä†·å≠·à≠ ·à≠·ãï·àµ ·ã≠·àµ·å°/·ã≠·åª·çâ:·àù·à≥·àå·ç° ·â£·àà 2 ·àò·äù·â≥ ·ä≠·çç·àç ·äÆ·äï·ã∂·àö·äï·ã®·àù... )")
    return TITLE

async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text("üíµ ·ãà·à≠·àÉ·ãä ·ä™·à´·ã©·äï ·â†·â•·à≠ ·ã≠·åª·çâ:")
    return PRICE

async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = update.message.text
    await update.message.reply_text("üõè ·ã®·àò·äù·â≥ ·â§·âµ ·âÅ·å•·à©·äï ·ã≠·åª·çâ:")
    return BEDROOMS

async def get_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['bedrooms'] = update.message.text
    # keyboard = [[InlineKeyboardButton(REGION_MAP[rid], callback_data=f"post_region:{rid}")] for rid in REGIONS]
    # await update.message.reply_text("üìç ·â§·âµ·ãé ·àö·åà·äù·â†·âµ·äï ·ä≠·àç·àç ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    # return REGION

    keyboard = []
    row = []
    for i, rid in enumerate(REGIONS):
        row.append(InlineKeyboardButton(REGION_MAP[rid], callback_data=f"region:{rid}"))
        if (i + 1) % 2 == 0:  # 2 buttons per row
            keyboard.append(row)
            row = []
    if row:  # Add remaining buttons
        keyboard.append(row)

    await update.message.reply_text("üìç ·â§·âµ·ãé ·àö·åà·äù·â†·âµ·äï ·ä≠·àç·àç ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    return REGION

async def post_region_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    region_key = query.data.split(":")[1]
    context.user_data['region'] = REGION_MAP[region_key]
    context.user_data['region_key'] = region_key

    city_keys = REGIONS.get(region_key, [])
    # keyboard = [[InlineKeyboardButton(CITY_MAP[c], callback_data=f"post_city:{c}")] for c in city_keys]
    # await query.message.reply_text("üèô ·â§·âµ·ãé ·àö·åà·äù·â†·âµ·äï ·ä®·â∞·àõ ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    # return CITY
    keyboard = []
    row = []

    for i, cid in enumerate(city_keys):
        row.append(InlineKeyboardButton(CITY_MAP[cid], callback_data=f"city:{cid}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await query.message.reply_text("üèô ·â§·âµ·ãé ·àö·åà·äù·â†·âµ·äï ·ä®·â∞·àõ ·ã≠·àù·à®·å°:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CITY
# -------------------------------------------------------------------------------------------
# xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# -------------------------------------------------------------------------------------------


async def rental_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìã ·â†·àµ·àú ·ã´·àâ ·â§·â∂·âΩ·äï ·ä†·à≥·ã≠", callback_data="show_listings")],
        [InlineKeyboardButton("‚ûï ·ã®·àö·ä®·à´·ã≠ ·â§·âµ·ãé·äï ·ã≠·àà·å•·çâ", callback_data="post")]
    ]
    await query.edit_message_text("·ä†·ä®·à´·ã≠ / ·ãà·ä™·àç ·ä†·àõ·à´·åÆ·âΩ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return RENTAL_MENU

async def show_my_listings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    try:
        response = requests.get(f"{LISTINGS_URL}/user/{user_id}")
        listings = response.json()

        if not listings:
            await query.edit_message_text("‚ö†Ô∏è ·â†·ä•·à≠·àµ·ãé ·àµ·àù ·ã®·ä™·à´·ã≠ ·â§·âµ ·àõ·åç·äò·âµ ·ä†·àç·âª·àç·äï·àù")
            return RENTAL_MENU

        for listing in listings:
            print(listing)
            caption = (
                    f" üè† *{listing['title']}*\n"
                    f" üìç{listing['region']} - {listing['city']} \n"
                    f" ‚òéÔ∏è {listing['contact']} \n"
                    f" üõè {listing['bedrooms']} ·àò·äù·â≥ \n"           
                    f" üíµ {listing['price']} ·â•·à≠/·ãà·à≠ \n"                  
                    f" üìù {listing.get('description', '')}\n"
                    

                )
            image_urls = listing.get("image_urls", "").split(",")
            buttons = [
                [
                    InlineKeyboardButton("‚úèÔ∏è ·ä†·àµ·â∞·ä´·ä≠·àç", callback_data=f"update:{listing['id']}"),
                    InlineKeyboardButton("‚ùå ·ä†·å•·çã", callback_data=f"delete:{listing['id']}")
                ]
            ]
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=image_urls[0] if image_urls else "",
                caption=caption,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è ·â†·ä•·à≠·àµ·ãé ·àµ·àù ·ã®·ä™·à´·ã≠ ·â§·âµ ·àõ·åç·äò·âµ ·ä†·àç·âª·àç·äï·àù: {e}")

    return RENTAL_MENU

async def handle_delete_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    print(f"Callback data received: {data}")

    if data.startswith("delete:"):
        listing_id = data.split(":")[1]
        try:
            res = requests.delete(f"{LISTINGS_URL}/{listing_id}")
            if res.status_code == 200:
                await query.message.reply_text("‚úÖ ·â§·â± ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·à∞·à≠·ãü·àç·ç¢")
            else:
                await query.message.reply_text("‚ùå ·ã®·àò·à∞·à®·ãù ·âµ·ä•·ãõ·ãù ·ä†·àç·â∞·à≥·ä´·àù·ç¢")
        except Exception as e:
            await query.message.reply_text(f"Error deleting listing: {e}")
        return RENTAL_MENU
   

async def handle_update_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    print(f"Callback data received: {data}")

    if data.startswith("update:"):
        listing_id = data.split(":")[1]
        context.user_data["update_listing_id"] = listing_id

        keyboard = [
            [InlineKeyboardButton("üìù ·ã®·ä™·à´·ã≠ ·â§·âµ·ãé ·ä†·å≠·à≠ ·à≠·ãï·àµ", callback_data="update_field:title")],
            [InlineKeyboardButton("üíµ ·ãà·à≠·àÉ·ãä ·ä™·à´·ã≠", callback_data="update_field:price")],
            [InlineKeyboardButton("üõè ·ã®·àò·äù·â≥ ·â§·âµ ·âÅ·å•·à≠", callback_data="update_field:bedrooms")],
            [InlineKeyboardButton("üìÑ ·ã®·â§·â± ·ãù·à≠·ãù·à≠ ·àò·åç·àà·å´", callback_data="update_field:description")],
        ]
        await query.message.reply_text("üõ† ·àù·äï ·àõ·àµ·â∞·ä´·ä®·àç ·ã≠·çà·àç·åã·àâ?", reply_markup=InlineKeyboardMarkup(keyboard))
        return UPDATE_FIELD
    

async def choose_update_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    field = query.data.split(":")[1]
    context.user_data["update_field"] = field
    await query.message.reply_text(f"‚úèÔ∏è ·àµ·àà ·â§·â± ·ãù·à≠·ãù·à≠ ·àò·åç·àà·å´ {field} ·ã´·àµ·åà·â°:")
    return UPDATE_VALUE

async def save_updated_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_value = update.message.text
    field = context.user_data["update_field"]
    listing_id = context.user_data["update_listing_id"]

    try:
        response = requests.put(f"{LISTINGS_URL}/{listing_id}", json={field: new_value})
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ ·àà·ãç·å° ·â†·âµ·ä≠·ä≠·àç ·â∞·àò·ãù·åç·âß·àç·ç¢")
        else:
            await update.message.reply_text("‚ùå ·àà·ãç·å°·äï ·àõ·ãµ·à®·åç ·ä£·àç·à≥·ä´·àù·ç¢")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è Error: {e}")

    return ConversationHandler.END

# -------------------------------------------------------------------------------------------
# cc
# -------------------------------------------------------------------------------------------


async def set_bot_commands(app):
    commands = [
        BotCommand("start", "ü§ñ ·åÄ·àù·à≠"),
        BotCommand("search", "üîç ·ã®·ä™·à´·ã≠ ·â§·âµ ·ã≠·çà·àç·åâ"),
        # BotCommand("post_handler", "‚ûï ·ã®·àö·ä®·à´·ã≠ ·â§·âµ·ãé·äï ·ã≠·àà·å•·çâ"),
        # BotCommand("show_my_listings", "üìã ·â†·àµ·àú ·ã´·àâ ·â§·â∂·âΩ·äï ·ä†·à≥·ã≠"),

    ]
    await app.bot.set_my_commands(commands)







# search
# post
# show_my_listings

# -------------------------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------------------------

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    print('Bot started')

   # Set the menu commands on startup
    app.post_init = set_bot_commands
  
    # Search Menu
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(search_entry, pattern="^search$"))
    app.add_handler(CallbackQueryHandler(region_callback, pattern="^region:"))
    app.add_handler(CallbackQueryHandler(city_callback, pattern="^city:"))
    app.add_handler(CallbackQueryHandler(bed_callback, pattern="^bed:"))

   

    # Rental Owner Menu
    app.add_handler(CallbackQueryHandler(rental_menu, pattern="^rental_menu$"))
    app.add_handler(CallbackQueryHandler(show_my_listings, pattern="^show_listings$"))
    
    # Add Listing Menu
    post_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(post_entry, pattern="^post$")],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_title)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bedrooms)],
            REGION: [CallbackQueryHandler(post_region_callback, pattern="^post_region:")],
            CITY: [CallbackQueryHandler(post_city_callback, pattern="^post_city:")],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            IMAGES: [MessageHandler((filters.PHOTO | filters.TEXT) & ~filters.COMMAND, get_images)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)]
        },
        fallbacks=[]
    )

    app.add_handler(post_handler)


    update_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_update_action, pattern="^update:")],
        states={
            UPDATE_FIELD: [CallbackQueryHandler(choose_update_field, pattern="^update_field:")],
            UPDATE_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_updated_value)],
        },
        fallbacks=[]
    )
    app.add_handler(update_handler)
    app.add_handler(CallbackQueryHandler(handle_update_action, pattern="^(update):"))

    app.add_handler(CallbackQueryHandler(handle_delete_action, pattern="^(delete):"))


    app.run_polling()
if __name__ == "__main__":
    main()
